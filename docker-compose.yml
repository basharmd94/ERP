services:
  # PostgreSQL Database
  postgres:
    image: postgres:16
    container_name: erp_postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"  # Different port to avoid conflict with local PostgreSQL
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - erp_network

  # Redis for caching and Celery broker
  redis:
    image: redis:7-alpine
    container_name: erp_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - erp_network

  # Django Web Application
  web:
    build: .
    container_name: erp_web
    restart: always
    environment:
      - DEBUG=${DEBUG}
      - DJANGO_ENVIRONMENT=${DJANGO_ENVIRONMENT}
      - SECRET_KEY=${SECRET_KEY}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "8090:8090"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - postgres
      - redis
    networks:
      - erp_network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --config gunicorn-cfg.py config.wsgi"

  # Celery Worker
  celery:
    build: .
    container_name: erp_celery
    restart: always
    environment:
      - DEBUG=${DEBUG}
      - DJANGO_ENVIRONMENT=${DJANGO_ENVIRONMENT}
      - SECRET_KEY=${SECRET_KEY}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - media_volume:/app/media
    depends_on:
      - postgres
      - redis
    networks:
      - erp_network
    command: celery -A config worker -l info

  # Celery Beat (Scheduler)
  celery-beat:
    build: .
    container_name: erp_celery_beat
    restart: always
    environment:
      - DEBUG=${DEBUG}
      - DJANGO_ENVIRONMENT=${DJANGO_ENVIRONMENT}
      - SECRET_KEY=${SECRET_KEY}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - media_volume:/app/media
    depends_on:
      - postgres
      - redis
    networks:
      - erp_network
    command: celery -A config beat -l info

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: erp_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - web
    networks:
      - erp_network

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  erp_network:
    driver: bridge
