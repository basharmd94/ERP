# Generated by Django 4.2.7 on 2025-10-29 11:56

from django.db import migrations, models
from collections import defaultdict


def convert_group_to_groups(apps, schema_editor):
    """
    Convert existing BusinessModuleGroupAccess records from single group to comma-separated groups.
    Combine records with same business+module but different groups into single record.
    """
    BusinessModuleGroupAccess = apps.get_model('authentication', 'BusinessModuleGroupAccess')
    PermissionGroup = apps.get_model('authentication', 'PermissionGroup')
    
    # Group existing records by business+module combination
    grouped_records = defaultdict(list)
    
    for record in BusinessModuleGroupAccess.objects.all():
        key = (record.business_id, record.module_id)
        grouped_records[key].append(record)
    
    # Process each group of records
    for (business_id, module_id), records in grouped_records.items():
        if not records:
            continue
            
        # Collect all group names for this business+module combination
        group_names = []
        permissions = {
            'can_view': False,
            'can_create': False,
            'can_edit': False,
            'can_delete': False
        }
        
        for record in records:
            # Get group name
            try:
                group = PermissionGroup.objects.get(id=record.group_id)
                group_names.append(group.name)
            except PermissionGroup.DoesNotExist:
                continue
                
            # Combine permissions (if any record has permission, the combined record should have it)
            permissions['can_view'] = permissions['can_view'] or record.can_view
            permissions['can_create'] = permissions['can_create'] or record.can_create
            permissions['can_edit'] = permissions['can_edit'] or record.can_edit
            permissions['can_delete'] = permissions['can_delete'] or record.can_delete
        
        if group_names:
            # Create comma-separated groups string
            groups_string = ','.join(group_names)
            
            # Update the first record with combined data
            first_record = records[0]
            first_record.groups = groups_string
            first_record.can_view = permissions['can_view']
            first_record.can_create = permissions['can_create']
            first_record.can_edit = permissions['can_edit']
            first_record.can_delete = permissions['can_delete']
            first_record.save()
            
            # Delete the other records for this business+module combination
            for record in records[1:]:
                record.delete()


def reverse_convert_groups_to_group(apps, schema_editor):
    """
    Reverse migration: Convert comma-separated groups back to individual records.
    """
    BusinessModuleGroupAccess = apps.get_model('authentication', 'BusinessModuleGroupAccess')
    PermissionGroup = apps.get_model('authentication', 'PermissionGroup')
    
    records_to_create = []
    records_to_delete = []
    
    for record in BusinessModuleGroupAccess.objects.all():
        if hasattr(record, 'groups') and record.groups:
            group_names = [name.strip() for name in record.groups.split(',') if name.strip()]
            
            if len(group_names) > 1:
                # Create separate records for each group
                for group_name in group_names:
                    try:
                        group = PermissionGroup.objects.get(name=group_name)
                        records_to_create.append(BusinessModuleGroupAccess(
                            business_id=record.business_id,
                            module_id=record.module_id,
                            group_id=group.id,
                            can_view=record.can_view,
                            can_create=record.can_create,
                            can_edit=record.can_edit,
                            can_delete=record.can_delete
                        ))
                    except PermissionGroup.DoesNotExist:
                        continue
                
                records_to_delete.append(record)
            elif len(group_names) == 1:
                # Update record to use single group
                try:
                    group = PermissionGroup.objects.get(name=group_names[0])
                    record.group_id = group.id
                    record.save()
                except PermissionGroup.DoesNotExist:
                    records_to_delete.append(record)
    
    # Create new records
    BusinessModuleGroupAccess.objects.bulk_create(records_to_create)
    
    # Delete old records
    for record in records_to_delete:
        record.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('authentication', '0007_remove_business_id_alter_business_zid'),
    ]

    operations = [
        # Step 1: Remove the old unique constraint
        migrations.AlterUniqueTogether(
            name='businessmodulegroupaccess',
            unique_together=set(),
        ),
        
        # Step 2: Add the new groups field
        migrations.AddField(
            model_name='businessmodulegroupaccess',
            name='groups',
            field=models.TextField(default='', help_text="Comma-separated list of group names (e.g., 'Sales,Purchase,SOP')"),
            preserve_default=False,
        ),
        
        # Step 3: Convert existing data
        migrations.RunPython(
            convert_group_to_groups,
            reverse_convert_groups_to_group,
        ),
        
        # Step 4: Remove the old group field
        migrations.RemoveField(
            model_name='businessmodulegroupaccess',
            name='group',
        ),
        
        # Step 5: Add the new unique constraint
        migrations.AlterUniqueTogether(
            name='businessmodulegroupaccess',
            unique_together={('business', 'module')},
        ),
    ]
